import{_ as a,c as s,o as e,a as l}from"./app.2ffcf9f9.js";const t="/assets/cover.a39e1a5b.png",n="/assets/install-desktop.6944d651.png",o="/assets/install-mobile.bb4dad4d.png",g=JSON.parse('{"title":"Chat 对话机器人","description":"","frontmatter":{},"headers":[{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"自行部署","slug":"自行部署","link":"#自行部署","children":[]},{"level":2,"title":"开发","slug":"开发","link":"#开发","children":[{"level":3,"title":"运行客户端","slug":"运行客户端","link":"#运行客户端","children":[]},{"level":3,"title":"运行服务端","slug":"运行服务端","link":"#运行服务端","children":[]}]}],"relativePath":"chat/index.md"}'),p={name:"chat/index.md"},r=l('<h1 id="chat-对话机器人" tabindex="-1">Chat 对话机器人 <a class="header-anchor" href="#chat-对话机器人" aria-hidden="true">#</a></h1><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-hidden="true">#</a></h2><p>你可以直接与它开始对话，它会以打字机模式回复。</p><p><img src="'+t+'" alt="cover"></p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-hidden="true">#</a></h2><p>如果你希望更快捷的打开它，你可以将应用添加到屏幕。在 web 上，一般点击右上角的安装按钮即可，例如 <img src="'+n+'" alt="install-desktop"></p><p>在移动端 chrome 中，你可以点击右上角的三个点，然后选择添加到主屏幕， <img src="'+o+`" alt="install-mobile"></p><h2 id="自行部署" tabindex="-1">自行部署 <a class="header-anchor" href="#自行部署" aria-hidden="true">#</a></h2><p>使用 docker 部署在美国区域的云服务器即可。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-itd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">chat-server</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">OPENAI_API_KEY=your-api-key</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">DATABASE_URL=pgsql-url</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8080</span><span style="color:#C3E88D;">:</span><span style="color:#F78C6C;">8080</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">rxliuli/chat-server:latest</span></span>
<span class="line"></span></code></pre></div><table><thead><tr><th>环境变量</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td><code>OPENAI_API_KEY</code></td><td>是</td><td>OpenAI API Key</td></tr><tr><td><code>DATABASE_URL</code></td><td>否</td><td>postgresql 数据库 url</td></tr></tbody></table><h2 id="开发" tabindex="-1">开发 <a class="header-anchor" href="#开发" aria-hidden="true">#</a></h2><ol><li>fork &amp;&amp; git clone</li><li>pnpm i # 请务必注意网络问题，不要使用 npm 的非官方镜像（例如淘宝源）</li></ol><h3 id="运行客户端" tabindex="-1">运行客户端 <a class="header-anchor" href="#运行客户端" aria-hidden="true">#</a></h3><p>如果你只想修改客户端的一些样式或者功能，你只需要运行客户端即可，不需要运行服务端。</p><ol><li>在 packages/chat/ 目录下 pnpm dev 运行客户端</li><li>打开 <a href="http://localhost:5174/" target="_blank" rel="noreferrer">http://localhost:5174/</a></li></ol><h3 id="运行服务端" tabindex="-1">运行服务端 <a class="header-anchor" href="#运行服务端" aria-hidden="true">#</a></h3><p>如果你需要涉及到数据库结构变更或服务端接口变更，则需要同时运行服务端。</p><ol><li>启动本地的 docker，使用 tsx 运行 packages/chat-server/scripts/pgsql.ts 脚本启动一个本地的 postgresql 数据库</li><li>创建 packages/chat-server/.env 添加 OPENAI_API_KEY/DATABASE_URL 环境变量，DATABASE_URL 示例 <code>DATABASE_URL=&quot;postgres://postgres:postgrespw@localhost:5432/chat?schema=public&quot;</code></li><li>配置 packages/chat/.env.local 添加 <code>SERVER_URL=&#39;http://localhost:8080/&#39;</code> 以将服务器指向本地</li><li>在 packages/chat-server/ 目录下 pnpm dev 运行服务端</li></ol>`,19),c=[r];function i(d,h,A,C,_,y){return e(),s("div",null,c)}const u=a(p,[["render",i]]);export{g as __pageData,u as default};
